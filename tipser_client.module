<?php

/**
 * @file
 * Contains tipser_client.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\tipser_client\TipserClient;

/**
 * Implements hook_help().
 */
function tipser_client_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.tipser_client':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Tipser Client') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_theme().
 */
function tipser_client_theme()
{
  return [
    'tipser_product_page' => [
      'variables' => [
        'productId' => null,
        'article_url' => null,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_region() for header_large.
 */
function tipser_client_preprocess_region__header_large(&$variables)
{
  $variables['include_tipser_icon'] = TipserClient::isActivated() && TipserClient::iconIsActivated();
}

/**
 * Override title metatag for /tipser-products/ page
 *
 * Implements hook_metatags_alter().
 */
function tipser_client_metatags_alter(array &$metatags, array &$context)
{
  if ('tipser_client.open_from_amp_page' === \Drupal::routeMatch()->getRouteName()) {
    $metatags['title'] = '[current-page:title]';
  }
}

function tipser_client_preprocess_html(&$variables)
{
  if ('tipser_client.open_from_amp_page' === \Drupal::routeMatch()->getRouteName()) {
    foreach ($variables['page']['#attached']['html_head'] as $i => &$htmlHead) {
      if (isset($htmlHead[1]) && $htmlHead[1] === 'robots') {
        $htmlHead[0]['#attributes']['content'] = 'noindex, nofollow, noarchive, nosnippet, noodp, noydir, noimageindex, notranslate';
      }
    }
  }

    if (TipserClient::isActivated()) {
      $variables['#attached']['drupalSettings']['tipser'] = [
          'userid' => \Drupal::config('tipser_client.config')->get('tipser_pos'),
      ];
  }
}

/**
 * Implements hook_page_attachments_alter().
 * @param array $page
 */
function tipser_client_page_attachments_alter(array &$page) {
  $config = \Drupal::config('tipser_client.config');
  if ($config->get('tipser_activated') && false === \Drupal::service('router.admin_context')->isAdminRoute()) {
    $page['#attached']['library'][] = 'tipser_client/frontend';
  }
}


/**
 * Taken from infinite_odoscope_update_library_source
 *
 * @param string $source
 *  the URL of the tipser library. If source starts with http://
 *   a http call is made and the response body is written to target
 *   otherwise the source will be written to target as is.
 * @param string $target
 *  the URI of the file where to store the source code e.g.
 *   public://tipser/tipser.sdk.js
 *
 * @return bool
 *  true on success otherwise false or exception
 * @throws Exception
 */
function tipser_update_library_source($source, $target){
  if ('' === $source) {
    throw new \Exception('Tipser library source not set.');
  }

  if(preg_match('/^https?:\/\//', $source)) {
    $client = Drupal::httpClient();
    $response = $client->get($source);
    if($response->getStatusCode() != 200) {
      return FALSE;
    }
    $response_body = $response->getBody()->getContents();
  }
  else {
    $response_body = $source;
  }

  $parts = explode('/', $target);
  array_pop($parts);
  $path = implode('/', $parts);
  if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
    return (file_put_contents($target, $response_body) !== FALSE);
  }
}
